/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serveurs.interfaces;

import java.awt.Adjustable;
import java.awt.GridLayout;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.util.List;
import javax.swing.*;
import serveurs.arbre_requetes.Arbre;

/**
 *
 * @author ag092850
 */
public class Dlg_resultat_requete extends javax.swing.JFrame {
    
    private Arbre arbre;
    private int nb_jscrollpane;
    
    public Dlg_resultat_requete(Arbre arbre) 
    {
        initComponents();
        this.arbre = arbre;
        this.affichage_resultat();
    }

    private void affichage_resultat()
    {
        List<String> resultat = this.arbre.lireArbre();
        String[] colonnes = resultat.get(0).split(";");
        this.ResultatRequete.setLayout(new GridLayout(2, colonnes.length));
        this.nb_jscrollpane = colonnes.length;
        //Création du nom des colonnes
        for(int i=0; i<colonnes.length; i++)
        {
            JLabel colonne = new JLabel();
            colonne.setText(colonnes[i]);
            this.ResultatRequete.add(colonne);
        }
        //Création des JTextArea des résultats
        for(int i=0; i<colonnes.length; i++)
        {
            JScrollPane jsp = new JScrollPane();
            JTextArea jta = new JTextArea();
            jta.setText("");
            jta.setEditable(false);
            jsp.setViewportView(jta);
            AdjustmentListener adjustmentListener = new AdjustmentListener() {
                @Override
                public void adjustmentValueChanged(AdjustmentEvent e) {
                    int vPos = jsp.getVerticalScrollBar().getValue();
                    
                    for(int j=0; j<nb_jscrollpane; j++)
                    {
                        JScrollPane jsp = (JScrollPane)ResultatRequete.getComponent(j+nb_jscrollpane);
                        jsp.getVerticalScrollBar().setValue(vPos);
                    }
                }
            };
            jsp.getVerticalScrollBar().addAdjustmentListener(adjustmentListener);
            this.ResultatRequete.add(jsp);
        }
        //Remplissage des JTextArea
        String[] tuple;
        for(int i=1; i<resultat.size(); i++)
        {
            tuple = resultat.get(i).split(";");
            for(int j=0; j<tuple.length; j++)
            {
                JScrollPane jsp = (JScrollPane)this.ResultatRequete.getComponent(j+colonnes.length);
                JTextArea jta = (JTextArea)(jsp.getViewport().getView());
                jta.setText(jta.getText()+""+tuple[j]+"\n");
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        NouvelleRequete = new javax.swing.JButton();
        RetourMenu = new javax.swing.JButton();
        ResultatRequete = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1500, 300));

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        NouvelleRequete.setText("Nouvelle requête");
        NouvelleRequete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                NouvelleRequeteActionPerformed(evt);
            }
        });
        jPanel1.add(NouvelleRequete);

        RetourMenu.setText("Revenir au menu principal");
        RetourMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RetourMenuActionPerformed(evt);
            }
        });
        jPanel1.add(RetourMenu);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        ResultatRequete.setPreferredSize(new java.awt.Dimension(1000, 275));

        javax.swing.GroupLayout ResultatRequeteLayout = new javax.swing.GroupLayout(ResultatRequete);
        ResultatRequete.setLayout(ResultatRequeteLayout);
        ResultatRequeteLayout.setHorizontalGroup(
            ResultatRequeteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
        );
        ResultatRequeteLayout.setVerticalGroup(
            ResultatRequeteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );

        getContentPane().add(ResultatRequete, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RetourMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetourMenuActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_RetourMenuActionPerformed

    private void NouvelleRequeteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NouvelleRequeteActionPerformed
        DLG_Requete dlg = new DLG_Requete();
        dlg.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_NouvelleRequeteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dlg_resultat_requete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dlg_resultat_requete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dlg_resultat_requete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dlg_resultat_requete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NouvelleRequete;
    private javax.swing.JPanel ResultatRequete;
    private javax.swing.JButton RetourMenu;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}

class MyAdjustmentListener implements AdjustmentListener 
{
    public void adjustmentValueChanged(AdjustmentEvent evt) 
    {
        Adjustable source = evt.getAdjustable();
        if (evt.getValueIsAdjusting()) {
          return;
        }
        int orient = source.getOrientation();
        if (orient == Adjustable.HORIZONTAL) {
          System.out.println("from horizontal scrollbar"); 
        } else {
          System.out.println("from vertical scrollbar");
        }
        int type = evt.getAdjustmentType();
        switch (type) {
        case AdjustmentEvent.UNIT_INCREMENT:
          System.out.println("Scrollbar was increased by one unit");
          break;
        case AdjustmentEvent.UNIT_DECREMENT:
          System.out.println("Scrollbar was decreased by one unit");
          break;
        case AdjustmentEvent.BLOCK_INCREMENT:
          System.out.println("Scrollbar was increased by one block");
          break;
        case AdjustmentEvent.BLOCK_DECREMENT:
          System.out.println("Scrollbar was decreased by one block");
          break;
        case AdjustmentEvent.TRACK:
          System.out.println("The knob on the scrollbar was dragged");
          break;
        }
        int value = evt.getValue();
    }
}